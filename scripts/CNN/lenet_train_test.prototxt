name: "LogReg"
layers {
  name: "mnist"
  type: DATA
  top: "data"
  top: "label"
  data_param {
    source: "train_leveldb/"
    batch_size: 256
  }
  include: { phase: TRAIN }
}
layers {
  name: "mnist"
  type: HDF5_DATA
  top: "data"
  top: "label"
  hdf5_data_param {
    source: "sample_data_list-test.txt"
    batch_size: 256
  }
  include: { phase: TEST }
}

#layers {
#  name: "slice"
#  type: SLICE
#  bottom: "data_orig"
#  top: "data"
#  top: "data_output"
#  slice_param {
#	slice_dim: 1
#	slice_point : 2
#  }
#}

#this part should be the same in learning and prediction network
layers {
  name: "conv1_7x7_64"
  type: CONVOLUTION
  blobs_lr: 1.
  blobs_lr: 2.
  bottom: "data"
  top: "conv2"
  convolution_param {
    num_output: 64
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "xavier"
      }
      bias_filler {
      type: "constant"
      }
    }
}

layers {
  name: "relu2"
  type: RELU
  bottom: "conv2"
  top: "conv2"
}

layers {
  name: "conv2_5x5_64"
  type: CONVOLUTION
  blobs_lr: 1.
  blobs_lr: 2.
  bottom: "conv2"
  top: "conv3"
  convolution_param {
    num_output: 64
    kernel_size: 5
    pad: 2
    weight_filler {
      type: "xavier"
      }
      bias_filler {
      type: "constant"
      }
    }
}

layers {
  name: "relu3"
  type: RELU
  bottom: "conv3"
  top: "conv3"
}

layers {
  name: "conv3_5x5_64"
  type: CONVOLUTION
  blobs_lr: 1.
  blobs_lr: 2.
  bottom: "conv3"
  top: "conv4"
  convolution_param {
    num_output: 64
    kernel_size: 5
    pad: 2
    weight_filler {
      type: "xavier"
      }
      bias_filler {
      type: "constant"
      }
    }
}

layers {
  name: "relu4"
  type: RELU
  bottom: "conv4"
  top: "conv4"
}

layers {
  name: "conv4_5x5_48"
  type: CONVOLUTION
  blobs_lr: 1.
  blobs_lr: 2.
  bottom: "conv4"
  top: "conv5"
  convolution_param {
    num_output: 48
    kernel_size: 5
    pad: 2
    weight_filler {
      type: "xavier"
      }
      bias_filler {
      type: "constant"
      }
    }
}

layers {
  name: "relu5"
  type: RELU
  bottom: "conv5"
  top: "conv5"
}

layers {
  name: "conv5_5x5_48"
  type: CONVOLUTION
  blobs_lr: 1.
  blobs_lr: 2.
  bottom: "conv5"
  top: "conv6"
  convolution_param {
    num_output: 48
    kernel_size: 5
    pad: 2
    weight_filler {
      type: "xavier"
      }
      bias_filler {
      type: "constant"
      }
    }
}

layers {
  name: "relu6"
  type: RELU
  bottom: "conv6"
  top: "conv6"
}


layers {
  name: "conv6_5x5_32"
  type: CONVOLUTION
  blobs_lr: 1.
  blobs_lr: 2.
  bottom: "conv6"
  top: "conv7"
  convolution_param {
    num_output: 32
    kernel_size: 5
    pad: 2
    weight_filler {
      type: "xavier"
      }
      bias_filler {
      type: "constant"
      }
    }
}

layers {
  name: "relu7"
  type: RELU
  bottom: "conv7"
  top: "conv7"
}


layers {
  name: "conv7_5x5_32"
  type: CONVOLUTION
  blobs_lr: 1.
  blobs_lr: 2.
  bottom: "conv7"
  top: "conv8"
  convolution_param {
    num_output: 32
    kernel_size: 5
    pad: 2
    weight_filler {
      type: "xavier"
      }
      bias_filler {
      type: "constant"
      }
    }
}

layers {
  name: "relu8"
  type: RELU
  bottom: "conv8"
  top: "conv8"
}

layers {
  name: "ip"
  type: INNER_PRODUCT
  bottom: "conv8"
  top: "ip_zw"
  inner_product_param {
    num_output: 361
    weight_filler {
      type: "xavier"
      }
    bias_filler {
      type: "constant"
      }
   }
}

#layers {
#  name: "flat"
#  type: FLATTEN
#  bottom: "conv8"
#  top: "ip_zw"
#}



#only learning framework
#layers {
#  name: "flat"
#  type: FLATTEN
#  bottom: "data_output"
#  top: "flat"
#}
#layers {
#  name: "loss"
#  type: EUCLIDEAN_LOSS
#  bottom: "ip"
#  bottom: "flat"
#  top: "loss"
#}
layers {
name: "accuracy"
type: ACCURACY
bottom: "ip_zw"
bottom: "label"
top: "accuracy"
}

layers {
  name: "loss"
  type: SOFTMAX_LOSS
  bottom: "ip_zw"
  bottom: "label"
  top: "loss"
}

